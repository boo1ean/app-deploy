#!/usr/bin/env node

var _ = require('lodash');
var minimatch = require('minimatch');
var path = require('path');
var fs = require('fs');
var realist = require('realist');
var table = require('text-table');
var shell = require('../lib/shell');
var version = require('../package').version;
var u = require('../lib/utils');
var sprintf = require('util').format;

var Configstore = require('configstore');
var Storage = require('../lib/storage');
var Matcher = require('../lib/matcher');
var Config = require('../lib/config');

var configPath = path.resolve('app-deploy.json');

// setup lodash templates to work with {{{ }}} interpolators
_.templateSettings.interpolate = /{{{([\s\S]+?)}}}/g;

var REMOTE_DEPLOY_SCRIPT     = __dirname + '/remote-deploy';
var APP_DEPLOY_UPDATE_SCRIPT = __dirname + '/update-app-deploy'
var PREPARE_SCRIPT           = __dirname + '/prepare';
var DEFAULT_ENV              = 'export APP_DEPLOY_VERSION=' + version;

try {
	var config  = new Config(configPath);
	var conf    = new Configstore(configPath);
	var storage = new Storage(conf);
} catch (e) {
	handleError(e);
}

var commands = {
	'default': usage,
	'remote add <name> <url>': addRemote,
	'remote rm <name>': removeRemote,
	'remote ls': listRemotes,
	'deploy local': localDeploy,
	'deploy <remote>': remoteDeploy,
	'update local': localUpdate,
	'update <remote>': remoteUpdate
};

function usage () {
	u.info(fs.readFileSync(__dirname + '/usage.txt').toString());
}

function addRemote (opts, name, url) {

	var tokens = url.split(':');
	var connectionString = tokens[0];
	var workingPath = tokens[1];

	var remote = {
		connectionString: connectionString,
		path: workingPath,
		env: opts.env || ''
	};

	validateRemote(connectionString, workingPath);
	storage.saveRemote(name, remote);

	function validateRemote (connectionString, workingPath) {
		if (!connectionString) {
			u.halt('Please specify remote connection string');
		}

		if (!workingPath) {
			u.halt('Please specify remote working path');
		}
	}

}

function listRemotes () {
	var remotes = storage.getRemotes();

	if (_.isEmpty(remotes)) {
		u.halt('There are no remotes');
	}

	remotes = _.map(remotes, function (remote, name) {
		return [name, remote.connectionString, remote.path, remote.env];
	});

	u.info(table(remotes));
}

function removeRemote (opts, name) {
	storage.removeRemoteByName(name);
	u.info('Successfully removed remote "' + name + '"');
}

function localDeploy (opts) {
	if (isGitRepoMissing()) {
		u.halt('Git repository not found');
	}

	var matcher = new Matcher(minimatch);

	var recentDeployHash = opts.start || storage.getRecentDeployHash();
	var headHash = opts.end || shell.getHeadHash();

	var commands;

	if (isEverythingDeployed(recentDeployHash, headHash)) {
		throw new Error('Nothing to deploy');
	}

	if (didNotDeployYet(recentDeployHash)) {
		return matcher.findInitialTriggersToExecute(config.triggers).then(runCommands);
	} else {
		// Get list of changed files
		var files = shell.getChangedFilesBetween(recentDeployHash, headHash);

		// Changed files info
		u.info('Changed files:');
		u.info(files.join('\n'), '\n');

		// Get list of commands to execute according to changed files
		matcher.findTriggersToExecute(config.triggers, files).then(runCommands);
	}

	function runCommands (commands) {
		if (opts.dryRun) {
			dryRun(commands);
		} else {
			run(commands);
		}
	}

	function dryRun (commands) {
		u.info('Commands to be executed:');
		u.info(commands.join('\n'));
	}

	function run (commands) {
		// Execute commands
		shell.executeCommands(commands);

		// Save deploy to completed deploys array
		storage.saveDeployInfo({ startHash: recentDeployHash, endHash: headHash, commands: commands });

		u.info('Successfully deployed!');
	}

	function isGitRepoMissing () {
		try {
			shell.exec('git st');
			return false;
		} catch (e) {
			return true;
		}
	}

	function didNotDeployYet (hash) {
		return !hash;
	}

	function isEverythingDeployed (left, right) {
		return left === right;
	}
}

function remoteDeploy (opts, remoteName) {
	var flags = [];

	if (opts.dryRun) {
		flags.push('--dry-run');
	}

	if (opts.start) {
		flags.push('--start ' + opts.start);
	}

	if (opts.end) {
		flags.push('--end ' + opts.end);
	}

	var deployScript = getDeployScript({
		flags: flags.join(' ')
	});

	executeShellScriptAtRemote(remoteName, deployScript);

	function getDeployScript (data) {
		return getShellScript(REMOTE_DEPLOY_SCRIPT, data);
	}
}

function getShellScript(scriptPath, data) {
	return _.template(fs.readFileSync(scriptPath).toString())(data)
		.split('\n')
		.filter(noComment)
		.filter(Boolean)
		.join('; ');

	function noComment (string) {
		return string[0] !== '#';
	}
}

function localUpdate (opts) {
	var script = getShellScript(APP_DEPLOY_UPDATE_SCRIPT);
	var result = shell.exec(script);
	u.info(result.output);
	u.info('Successfully update app-deploy CLI');
}

function remoteUpdate (opts, remoteName) {
	var script = getShellScript(APP_DEPLOY_UPDATE_SCRIPT);
	executeShellScriptAtRemote(remoteName, script);
}

function executeShellScriptAtRemote (remoteName, script) {
	var remote = storage.getRemoteUrlByName(remoteName);

	if (!remote) {
		u.halt('Remote ' + remoteName + ' not found');
	}

	var prepareScript = getShellScript(PREPARE_SCRIPT, remote);
	var fullScript = [prepareScript, script].join('; ');

	var cmd = sprintf('ssh %s \'%s\'', remote.connectionString, fullScript);
	var result = shell.exec(cmd);

	u.info(result.output);
}

function handleError (e) {
	u.halt(e.message);
}

var options = {
	'dryRun': ['dry-run', 'dry'],
	'end': ['head', 'end', 'end-hash'],
	'start': ['start', 'start-hash']
};

try {
	realist(commands, options);
} catch (e) {
	handleError(e);
}
